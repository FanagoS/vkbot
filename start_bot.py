import  vk_api
import  pickle
import  requests
import random
from vk_api.longpoll import  VkLongPoll, VkEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.utils import get_random_id

Профессия_базовая = ['Сексолог', 'Химик', 'Астрофизик', 'Повар', 'Психотерапевт',
'Иммунолог', 'Курьер', 'Модель', 'Футболист', 'Доктор',
'Хирург', 'СММ', 'Художник', 'Биолог', 'Порноактер',
'Плотник', 'Слесарь', 'Президент', 'Архитектор', 'Блогер',
'Электрик', 'Учитель', 'Геолог', 'Хакер', 'Клоун',
'Горняк', 'Экстрасенс', 'Бухгалтер', 'Генный инженер', 'Водитель',
'Рыбак', 'Летчик', 'Философ', 'Массажист', 'Секретарь',
'Радиомеханик', 'Кинорежиссер', 'Диетолог', 'Фитнес-тренер', 'Каскадер',
'Инкасатор', 'Няня', 'Риелтор', 'Стилист', 'Диктор',
'Пожарный', 'Судья', 'Охранник', 'Ландшафтный дизайнер', 'Строитель']

Фобия_базовая = ['Ятрофобия — боязнь врачей', 'Эротофобия — боязнь секса или вопросов о сексе', 'Эфебифобия — боязнь подростков', 'Боязнь числа 4',
'Гоплофобия — боязнь оружия', 'Фармакофобия — боязнь принимать лекарства', 'Туннелефобия — боязнь прохождения через туннель', 'Нет фобии',
'Агорафобия — боязнь пространства, открытых мест', 'Трипанофобия — боязнь игл и уколов', 'Топофобия — боязнь остаться одному в помещении', 'Нет фобии',
'Токофобия — страх перед родами', 'Термофобия — боязнь жары и натопленных помещений', 'Социофобия — боязнь общества, контактов, неловкого поведения в обществе, оценки окружающими', 'Нет фобии',
'Робофобия — страх по отношению к любой робототехнике', 'Радиофобия — боязнь радиации', 'Психрофобия — боязнь холода', 'Нет фобии',
'Пирофобия — боязнь огня, пожаров, гибели от огня', 'Педофобия — навязчивый страх детей или имитирующих их изделий', 'Никтофобия — боязнь темноты', 'Нет фобии',
'Мусофобия — боязнь мышей и крыс', 'Фобофобия - боязнь фобий', 'Ксенофобия — страх или ненависть к кому-либо или чему-либо чужому, незнакомому, непривычному', 'Нет фобии',
'Компьютерофобия — боязнь компьютеров', 'Коулрофобия — боязнь клоунов', 'Климакофобия — боязнь ходьбы по лестнице, лестниц', 'Нет фобии',
'Клаустрофобия — боязнь замкнутого пространства', 'Клептофобия — боязнь украсть, либо страх быть обокраденным', 'Кенофобия — боязнь больших незаполненных пространств', 'Нет фобии',
'Инсектофобия — боязнь насекомых', 'Зоофобия — боязнь животных', 'Гравидофобия — боязнь встречи с беременной, беременности', 'Нет фобии',
'Аквафобия — боязнь воды, сырости', 'Гетерофобия — боязнь противоположного пола', 'Герпетофобия — боязнь рептилий, пресмыкающихся, змей', 'Нет фобии',
'Геронтофобия — страх общения с пожилыми людьми или собственного старения', 'Гемофобия — боязнь крови', 'Гелиофобия — боязнь солнца, солнечного света', 'Нет фобии',
'Блаптофобия — боязнь нанести кому-либо повреждение', 'Кирпичнофобия — боязнь кирпичей', 'Авиафобия - боязнь полётов в воздушных транспортных средствах', 'Нет фобии']

Болезнь_базовая = ['Идеальное', 'Косоглазие', 'Алкоголизм', 'Эпилепсия', 'Аллергия на пыльцу',
'Гастрит', 'Геморрой', 'Рак лёгких(осталось 3 года)', 'Рак мозга(осталось 2 года)', 'Альцгеймер', 'Идеальное',
'Стафилококк', 'СПИД', 'ВИЧ', 'Пролапс клапана сердца', 'Нег ноги', 'Идеальное',
'Нет руки', 'Мигрень', 'Панкреатит', 'Аносмия', 'Камни в почках', 'Идеальное',
'Камни в желчном пузыре', 'Бесплодие', 'Аритмия', 'Одно яйцо', 'Наркомания', 'Идеальное',
'Коньюктивит', 'Глухой', 'Немой', 'Слепой', 'Диабет', 'Идеальное',
'Гемофелия', 'Псариаз', 'Шизофрения', 'Нет почки', 'Хрустальный человек', 'Идеальное',
'Нет пальцев на правой руке', 'Нет уха', 'Отсутствие зубов', 'Глисты', 'БиполярОчка', 'Идеальное']

Болезнь_стадия_базовая = ['Ремиссия', '10 %', '11 %', '12 %', '13 %', '14 %', '15 %', '16 %', '17 %', '18 %',
'19 %', '20 %', '21 %', '22 %', '23 %', '24 %', '25 %', '26 %', '27 %', '28 %', '29 %', '30 %',
'31 %', '32 %', '33 %', '34 %', '35 %', '36 %', '37 %', '38 %', '39 %', '40 %', '41 %', '42 %',
'43 %', '44 %', '45 %', '46 %', '47 %', '48 %', '49 %', '50 %', '51 %', '52 %', '53 %', '54 %',
'55 %', '56 %', '57 %', '58 %', '59 %', '60 %', '61 %', '62 %', '63 %', '64 %', '65 %', '66 %',
'67 %', '68 %', '69 %', '70 %', '71 %', '72 %', '73 %', '74 %', '75 %', '76 %', '77 %', '78 %',
'79 %', '80 %', '81 %', '82 %', '83 %', '84 %', '85 %', '86 %', '87 %', '88 %', '89 %', '90 %',
'91 %', '92 %', '93 %', '94 %', '95 %', '96 %', '97 %', '98 %', '99 %', '100 %', 'Инкубационный период', 'Прогрессирует']

Телосложение_базовая = ['Анорексия', 'Худое', 'Атлетичное', 'Спортивное', 'Полнота', 'Ожирение', 'Ожирение-сильное']

Человеческая_черта_базовая = ['Агрессивность', 'Алчность', 'Альтруизм', 'Бездарность', 'Благородство',
'Болтливость', 'Вежливость', 'Высокомерие', 'Героизм', 'Гордость',
'Горячность', 'Гуманность', 'Доброта', 'Женственность', 'Жестокость',
'Жизнерадостность', 'Искренность', 'Коварство', 'Лень', 'Лесть',
'Лицемерие', 'Мудрость', 'Мужество', 'Малодушие', 'Нетерпимость',
'Смелость', 'Пунктуальность', 'Сентиментальность', 'Эгоизм', 'Эмпатия',
'Чудак', 'Честность', 'Трусость', 'Самоуверенность', 'Наглость',
'Отвага', 'Остроумие', 'Настойчивость', 'Сдержанность',
'Конформизм - изменение в поведении, мнении или оценках человека под влиянием давления со стороны ближнего окружения']

Хобби_базовая = ['Разводить животных', 'Рыбалка', 'Изготовлять куклы', 'Игра в шахматы', 'Туризм',
'Охота', 'Наблюдение за птицами', 'Танцы', 'Пейнтбол', 'Гольф',
'Страйкбол', 'Историческая реконструкция', 'Ролевые игры', 'Любительская радиосвязь', 'Чтение',
'Коллекционирование', 'Игра в любительском театре', 'Собирание пазлов', 'Рукоделие', 'Садоводство',
'Любительская астрономия', 'Лечение травами', 'Кулинария', 'Пение', 'Паркуризм',
'Любительская фотография', 'Любительская живопись', 'Компьютерные игры', 'Настольные игры', 'Интеллектуальные игры',
'Стихоплётство', 'Коллекционирование монет', 'Коллекционирование марок', 'Собирание грибов', 'Собачник(ца)']

Багаж_базовая = ['Книга по кулинарии', 'Зонт', 'Лодка', 'Семена пшеницы', 'Велосипед',
'Телефон', 'Капкан', 'Собрание книг Гарри Поттера', 'Шахматы', 'Резиновый челен',
'Саженцы помидор', '10 кг картошки', 'Охотничий нож', 'Пистолет + 100 патрон', '2 кирпича',
'Таблетки от запора', 'Аптечка', 'Фанарик и батарейки', 'Набор красок', 'Рыболовные снасти',
'Лодка', 'Ноутбук', 'Книга по выживанию', '2-летняя девочка', 'Библия',
'Ящик лития и инсулина', 'Взрывчатка', 'Терариум змей', 'Муровейник', 'Банка с огурцами ',
'Подушка пердушка', 'Ящик респираторов', 'Антисептик', '100 коробков спичек', 'Котенок',
'Протез', 'Лук + 50 стрел', 'Собака', 'Электро генератор', 'Таблетки от запора',
'Беременная коза', 'Мешок плодородной почвы', 'Фильтры для воды на 3 года', '3-летний мальчик', 'попугай Ара']

ДопИнф_базовая = ['Пройдены курсы сексолога', 'Пройдены курсы психотерапевта', 'Объездил(а) весь мир', 'Ограбил(а) банк', 'Нимфоман(ка)',
'Ограбил(а) собственного деда', 'Выйграл(а) турнир по пейнтболу', 'Знает местоположение склада с оружием', 'Пиромант(ка)', 'Знал(а) президента лично',
'Знает местоположение винного погреба', 'Копрофил(ка)', 'Воевал(а) на Донбасе', 'Кукольник', 'Пройдены курсы фельдшера ',
'Стритрейсер(ша)', 'Бывший(ая) наркоман(ка)', 'Спас(ла) детей из пожара', 'Утонула вторая половина', 'Сын(Дочь) фермера',
'Дресировщик(ца)', 'Закончил(а) художку', 'Любит охотиться', 'Жил(а) в лесу 2 года', 'Левак',
'Сменил(а) пол', 'Геймер(ша)', 'Резидент камеди клаб', 'Лежал(а) в дурке', 'Пережил клиническую смерть',
'Любитель(ница) машин', 'Может заниматься сексом 5 раз за ночь', 'Выйграл(а) милион в латерею', 'Знает местоположение водного источника', 'Автор книги по кулинарии',
'Вырос(ла) в семье врачей', 'Победил(а) в олимпиаде по плаванью', 'Пройдены курсы химика', 'Пройдены курсы программиста', 'Ходил(а) на каратэ',
'Второе образование археолог', 'Второе образование химик', 'Второе образование механик', 'КМС по шахматам', 'Съел(а) человека',
'Способен(на) гнать спирт из чего угодно', 'умение ориентироваться по звёздам', 'знания о воде и её отчистке', 'зоолог']

Карта1_базовая = ['+1 место в бункере', 'Бункер находится на территории парка развлечений, разрушаемость 70%', 'Защита себя или кого-либо до следующего голосования',
'-1 голос против себя на голосовании', 'Воскресить одного игрока', 'Обменять голоса между выставленными игроками',
'-1 место в бункере', 'Получить новое состояние здоровья', 'Обменяться состоянием здоровья с любым игроком',
'Получить новые генетические характеристики', 'Обменяться генетическими характеристиками с игроком справа', 'Вы пропускаете круг голосования для всего стола',
'Получить новый багаж', 'Получить новую доп.инфу', 'Обменяться доп.инфой с любым игроком', 'Чтобы попасть в бункер, игрок до вас не должен пройти, он ваш враг',
'Изменить человеческую черту', 'Омолодить любого игрока на 15 лет', 'Состарить любого игрока на 20 лет',
'Обменяться багажом с любым игроком', 'Бункер рядом со складом оружия', 'Бункер рядом со складом пива',
'Рядом находится враждебно настроенный бункер', 'Бункер расположен на территории военной базы, разрушаемость 50%', 'Бункер расположен на территории АЭС, разрушаемость 90%',
'Отменить половину голосов против себя', 'Перераздать профессии', 'Перераздать профессии половине стола',
'Рядом находится бункер с 3 женщинами 30 лет, готовыми к размножению', 'Рядом находится бункер с 2 мужчинами химиками', 'Рядом находится бункер с 2 мужчинами химиками 35 лет',
'Рядом находится бункер с 3 мужчинами 35 лет, готовыми к размножению', 'Вылечить любого игрока, включая себя', 'Вы выбираете кто покинет бункер, без голосования',
'Излечить плодовитость', 'Сменить плодовитость на противоположную', 'Покалечить здорового игрока(изменить состояние здоровья на: Нет ноги/Нет руки)',
'Выбранный игрок будет говорить на 30 секунд меньше', 'Сгенерируйте ещё одну профессию, у вас теперь их две!',
'Выбранный вами игрок использует карточку действия на ваш выбор', 'Вскройте любую характеристику любого игрока', 'Вскройте любую характеристику игрока слева']

Карта2_базовая = ['+1 место в бункере', 'Бункер находится на территории парка развлечений, разрушаемость 70%', 'Защита себя или кого-либо до следующего голосования',
'-1 голос против себя на голосовании', 'Обменять голоса между выставленными игроками', 'Сменить плодовитость на противоположную',
'-1 место в бункере', 'Получить новое состояние здоровья', 'Обменяться состоянием здоровья с любым игроком',
'Получить новые генетические характеристики', 'Обменяться генетическими характеристиками с игроком справа', 'Получить новый багаж',
'Получить новую доп.инфу', 'Обменяться доп.инфой с любым игроком', 'Изменить человеческую черту', 'Чтобы попасть в бункер, игрок после вас должен пройти, он ваш друг',
'Омолодить любого игрока на 15 лет', 'Состарить любого игрока на 20 лет', 'Обменяться багажом с любым игроком',
'Бункер рядом со складом холодного оружия', 'Бункер рядом со складом вина', 'Рядом находится враждебно настроенный бункер',
'Бункер расположен на территории военной базы, разрушаемость 50%', 'Рядом расположена АЭС', 'Отменить половину голосов против себя',
'Перераздать профессии', 'Перераздать профессии половине стола', 'Рядом находится бункер с 3 женщинами 30 лет, готовыми к размножению', 'Рядом находится бункер с 2 мужчинами химиками',
'Рядом находится бункер с 2 мужчинами химиками 35 лет', 'Рядом находится бункер с 3 мужчинами 35 лет, готовыми к размножению', 'Вылечить любого игрока, включая себя',
'Выбранный игрок будет говорить на 30 секунд меньше', 'Сгенерируйте ещё одну профессию, у вас теперь их две!',
'Выбранный вами игрок использует карточку действия на ваш выбор', 'Вскройте любую характеристику любого игрока', 'Вскройте любую характеристику игрока справа']

Пол_базовая = ['М', 'Ж']

Плодовитость_базовая = ['Чайлдфри', 'Плодовитый(ая)']

#ROOM = {"Room_id": "", "Room_name" = "", "Room_pass" = "", "Room_status": "", "user": [], "game" = []}
#USER_Date = {"ID": 0, "Status": "", "Room_id": ""}
ROOM = []
USER_Date = []
#pickle.dump(ROOM, open('ROOM.pickle', 'wb'))
#pickle.dump(USER_Date, open('USER_Date.pickle', 'wb'))

#ROOM = pickle.load(open('ROOM.pickle', 'rb'))
#USER_Date = pickle.load(open('USER_Date.pickle', 'rb'))

vk_session = vk_api.VkApi(token= "f6cb415e10d608e910ccf214703bb749b8bbc63df0879b33d20bdf6718dcf71dea96ae095deb2f1a3335b")
vk = vk_session.get_api()
longPool = VkLongPoll(vk_session)


def doc(user_id, doc_name, kb = ""):
    doc = open("card.txt", "r")
    a = vk.docs.getMessagesUploadServer(type = "doc", peer_id = user_id)
    b = requests.post(a["upload_url"], files = {"file": doc}).json()
    c = vk.docs.save(file = b["file"], title = doc_name)
    d = 'doc{}_{}'.format(c["doc"]["owner_id"], c["doc"]["id"])
    if kb == "":
        vk.messages.send(user_id = user_id, attachment = d, random_id = 0)
    else:
        vk.messages.send(user_id = user_id, attachment = d, keyboard = kb, random_id = 0)

def set_status_userData(USER_Date, status):
    tUser_data = []
    for i in USER_Date:
        if i["ID"] == id:
            tUser_data.append({"ID": i["ID"], "Status": status, "Room_id": i["Room_id"]})
        else:
            tUser_data.append(i)

    USER_Date = tUser_data.copy()
    pickle.dump(USER_Date, open('USER_Date.pickle', 'wb'))

    return USER_Date


class GameRom():
    def __init__(self, host_id, room_id, user):
        self.host_id = host_id
        self.room_id = room_id
        self.user = user

        self.initCard()

        self.card_count = 1

    def setUser(self, user):
        self.user = user

    def initCard(self):
        self.Профессии = Профессия_базовая.copy()
        self.Фобии = Фобия_базовая.copy()
        self.Болезнь = Болезнь_базовая.copy()
        self.Болезнь_стадия = Болезнь_стадия_базовая.copy()
        self.Телосложение = Телосложение_базовая.copy()
        self.Человеческая_черта = Человеческая_черта_базовая.copy()
        self.Хобби = Хобби_базовая.copy()
        self.Багаж = Багаж_базовая.copy()
        self.ДопИнф = ДопИнф_базовая.copy()
        self.Карта1 = Карта1_базовая.copy()
        self.Карта2 = Карта2_базовая.copy()
        self.Пол = Пол_базовая.copy()
        self.Плодовитость = Плодовитость_базовая.copy()

    def appendUser(self, id):
        self.user.append(id)

    def lenUser(self):
        return len(self.user)

    def remUser(self, id):
        self.user.remove(id)

    def resetProf(self):
        self.Профессии = Профессия_базовая.copy()
        card_n = 1
        for id in self.user:
            file = open('card.txt', 'w')
            file.write('Профессия: ' + self.Профессии.pop(random.randint(0, len(self.Профессии) - 1)))
            file.close()
            doc(id, "Карта №" + str(card_n))
            card_n += 1

    def create_card(self, id):
        file = open('card.txt', 'w')
        file.write('Профессия: ' + self.Профессии.pop(random.randint(0, len(self.Профессии) - 1)))
        file.write('\nПол: ' + str(self.Пол[random.randint(0, len(self.Пол) - 1)]) + " Возраст: " + str(random.randint(18, 80)) + ' Плодовитость: ' + str(self.Плодовитость[random.randint(0, len(self.Плодовитость) - 1)]))
        file.write('\nФобия: ' + self.Фобии.pop(random.randint(0, len(self.Фобии) - 1)))
        file.write('\nЗдоровье: ' + self.Болезнь.pop(random.randint(0, len(self.Болезнь) - 1)) + ' Стадия: ' + self.Болезнь_стадия.pop(random.randint(0, len(self.Болезнь_стадия) - 1)))
        file.write('\nТелосложение: ' + self.Телосложение[random.randint(0, len(self.Телосложение) - 1)])
        file.write('\nЧеловеческая черта: ' + self.Человеческая_черта.pop(random.randint(0, len(self.Человеческая_черта) - 1)))
        file.write('\nХобби: ' + self.Хобби.pop(random.randint(0, len(self.Хобби) - 1)))
        file.write('\nБагаж: ' + self.Багаж.pop(random.randint(0, len(self.Багаж) - 1)))
        file.write('\nДопИнф: ' + self.ДопИнф.pop(random.randint(0, len(self.ДопИнф) - 1)))
        file.write('\nКарта1: ' + self.Карта1.pop(random.randint(0, len(self.Карта1) - 1)))
        file.write('\nКарта2: ' + self.Карта2.pop(random.randint(0, len(self.Карта2) - 1)))
        file.close()

        doc(id, "Карта №" + str(self.card_count))
        self.card_count += 1

    def startGame(self):
        self.initCard()
        for i in self.user:
            self.create_card(i)

    def getNewHar(self, text):
        file = open('card.txt', 'w')
        if text == "профессия":
            file.write('Профессия: ' + self.Профессии.pop(random.randint(0, len(self.Профессии) - 1)))
        if text == "пол":
            file.write('\nПол: ' + str(self.Пол[random.randint(0, len(self.Пол) - 1)]) + " Возраст: " + str(random.randint(18, 80)) + ' Плодовитость: ' + str(self.Плодовитость[random.randint(0, len(self.Плодовитость) - 1)]))
        if text == "фобия":
            file.write('\nФобия: ' + self.Фобии.pop(random.randint(0, len(self.Фобии) - 1)))
        if text == "здоровье":
            file.write('\nЗдоровье: ' + self.Болезнь.pop(random.randint(0, len(self.Болезнь) - 1)) + ' Стадия: ' + self.Болезнь_стадия.pop(random.randint(0, len(self.Болезнь_стадия) - 1)))
        if text == "телосложение":
            file.write('\nТелосложение: ' + self.Телосложение[random.randint(0, len(self.Телосложение) - 1)])
        if text == "черта":
            file.write('\nЧеловеческая черта: ' + self.Человеческая_черта.pop(random.randint(0, len(self.Человеческая_черта) - 1)))
        if text == "хобби":
            file.write('\nХобби: ' + self.Хобби.pop(random.randint(0, len(self.Хобби) - 1)))
        if text == "багаж":
            file.write('\nБагаж: ' + self.Багаж.pop(random.randint(0, len(self.Багаж) - 1)))
        if text == "доп":
            file.write('\nДопИнф: ' + self.ДопИнф.pop(random.randint(0, len(self.ДопИнф) - 1)))
        if text == "карта1":
            file.write('\nКарта1: ' + self.Карта1.pop(random.randint(0, len(self.Карта1) - 1)))
        if text == "карта2":
            file.write('\nКарта2: ' + self.Карта2.pop(random.randint(0, len(self.Карта2) - 1)))
        file.close()

        doc(self.host_id, "Замена - " + text, get_keyboard("создать комнату"))


def create_cards_count(count, user_id):
    Профессии = Профессия_базовая.copy()
    Фобии = Фобия_базовая.copy()
    Болезнь = Болезнь_базовая.copy()
    Болезнь_стадия = Болезнь_стадия_базовая.copy()
    Телосложение = Телосложение_базовая.copy()
    Человеческая_черта = Человеческая_черта_базовая.copy()
    Хобби = Хобби_базовая.copy()
    Багаж = Багаж_базовая.copy()
    ДопИнф = ДопИнф_базовая.copy()
    Карта1 = Карта1_базовая.copy()
    Карта2 = Карта2_базовая.copy()
    Пол = Пол_базовая.copy()
    Плодовитость = Плодовитость_базовая.copy()

    for i in range(count):
        file = open('card.txt', 'w')
        file.write('Профессия: ' + Профессии.pop(random.randint(0, len(Профессии) - 1)))
        file.write('\nПол: ' + str(Пол[random.randint(0, len(Пол) - 1)]) + " Возраст: " + str(random.randint(18, 80)) + ' Плодовитость: ' + str(Плодовитость[random.randint(0, len(Плодовитость) - 1)]))
        file.write('\nФобия: ' + Фобии.pop(random.randint(0, len(Фобии) - 1)))
        file.write('\nЗдоровье: ' + Болезнь.pop(random.randint(0, len(Болезнь) - 1)) + ' Стадия: ' + Болезнь_стадия.pop(random.randint(0, len(Болезнь_стадия) - 1)))
        file.write('\nТелосложение: ' + Телосложение[random.randint(0, len(Телосложение) - 1)])
        file.write('\nЧеловеческая черта: ' + Человеческая_черта.pop(random.randint(0, len(Человеческая_черта) - 1)))
        file.write('\nХобби: ' + Хобби.pop(random.randint(0, len(Хобби) - 1)))
        file.write('\nБагаж: ' + Багаж.pop(random.randint(0, len(Багаж) - 1)))
        file.write('\nДопИнф: ' + ДопИнф.pop(random.randint(0, len(ДопИнф) - 1)))
        file.write('\nКарта1: ' + Карта1.pop(random.randint(0, len(Карта1) - 1)))
        file.write('\nКарта2: ' + Карта2.pop(random.randint(0, len(Карта2) - 1)))
        file.close()

        doc(user_id, "Карта №" + str(i + 1))
    sender(id, "Создание завершено", get_keyboard("начать"))

def sender(id, text, keyboard = ""):
    if keyboard == "":
        vk.messages.send(user_id=id,
                         message=text,
                         random_id=0)
    else:
        vk.messages.send(user_id = id,
                     message = text,
                     keyboard = keyboard,
                     random_id = 0)

def get_keyboard(command= "начать"):
    keyboard = VkKeyboard(one_time=True)


    if command == "начать" or command == "удалить комнату" or command == "выйти из комнаты":
        keyboard.add_button('Создать комнату', color=VkKeyboardColor.DEFAULT)
        keyboard.add_button('Войти в комнату', color=VkKeyboardColor.POSITIVE)
        keyboard.add_button('Создать карты', color= VkKeyboardColor.PRIMARY)


    if command == "создать комнату":
        keyboard.add_button('Раздать карты всем', color=VkKeyboardColor.DEFAULT)
        keyboard.add_button('Заменить характеристику', color=VkKeyboardColor.DEFAULT)
        keyboard.add_line()
        keyboard.add_button('Перераздать проф.', color=VkKeyboardColor.DEFAULT)
        keyboard.add_button('Удалить комнату', color=VkKeyboardColor.NEGATIVE)


    if command == "войти в комнату":
        keyboard.add_button('Выйти из комнаты', color=VkKeyboardColor.NEGATIVE)

    if command == "новая характеристика":
        keyboard.add_button("профессия")
        keyboard.add_button("пол")
        keyboard.add_button("фобия")
        keyboard.add_button("здоровье")
        keyboard.add_line()
        keyboard.add_button("телосложение")
        keyboard.add_button("черта")
        keyboard.add_button("хобби")
        keyboard.add_button("багаж")
        keyboard.add_line()
        keyboard.add_button("доп")
        keyboard.add_button("карта1")
        keyboard.add_button("карта2")

    return  keyboard.get_keyboard()

def createRoom(id):
    room_id = random.randint(0,9)*1 + random.randint(0,9)*10 + random.randint(0,9)*100 + random.randint(0,9)*1000
    ROOM.append({"Room_id": room_id,
                 "Room_status": "Создана",
                 "User": [id],
                 "Game": GameRom(id, room_id, [id])})
    return room_id

def loginRoom(msg, id):
    tRom = False
    for i in ROOM:
        if str(i["Room_id"]) == msg:
            tRom = True
            game = i["Game"]
            Host = i["User"][0]

    if tRom:
        game.appendUser(id)
        sender(Host, "Подключен новый пользователь\nВсего: " + str(game.lenUser()))
        sender(id, "Подключение успешно\nВаш номер: " + str(game.lenUser()), get_keyboard("войти в комнату"))
    else:
        sender(id, "Неверный код", get_keyboard("начать"))

    return  tRom



for event in longPool.listen():

    if event.type == VkEventType.MESSAGE_NEW:
        if event.to_me:

            msg = event.text.lower()
            id = event.user_id
            status = ""
            room_id = 0
            if msg == "начать":
                est = True
                for i in USER_Date:
                    if i["ID"] == id:
                        est = False
                if est:
                    USER_Date.append({"ID": id, "Status": "СтартовоеМеню", "Room_id": "0"})
                    pickle.dump(USER_Date, open('USER_Date.pickle', 'wb'))
                sender(id, "Привет! Зайди в свободную комнату или создай свою для игры\n Или просто сгенерируй карты", get_keyboard(msg))

            for i in USER_Date:
                if i["ID"] == id:
                    status = i["Status"]
                    room_id = i["Room_id"]

            print(msg, status)

            if status == "МеняетХарактеристику":
                for i in ROOM:
                    if i["User"][0] == id:
                        i["Game"].getNewHar(msg)
                        USER_Date = set_status_userData(USER_Date, "ВКомнатеХост")


            if status == "СоздаетКарты":
                USER_Date = set_status_userData(USER_Date, "СтартовоеМеню")
                create_cards_count(int(msg), id)

            if msg == "заменить характеристику" and status == "ВКомнатеХост":
                USER_Date = set_status_userData(USER_Date, "МеняетХарактеристику")
                sender(id, "Ввыберите характеристику", get_keyboard("новая характеристика"))

            if msg == "раздать карты всем" and status == "ВКомнатеХост":
                for i in ROOM:
                    if i["User"][0] == id:
                        i["Game"].startGame()
                        sender(id, "Карты розданы", get_keyboard("создать комнату"))

            if msg == "перераздать проф." and status == "ВКомнатеХост":
                for i in ROOM:
                    if i["User"][0] == id:
                        i["Game"].resetProf()
                        sender(id, "Выполнено", get_keyboard("создать комнату"))

            if msg == "удалить комнату" and status == "ВКомнатеХост":
                rem = {}
                for i in ROOM:
                    if i["User"][0] == id:
                        user =  i["Game"].user
                        rem = i
                ROOM.remove(rem)
                for id in user:
                    USER_Date = set_status_userData(USER_Date, "СтартовоеМеню")
                    sender(id, "Комната удалена", get_keyboard("начать"))

            if status == "ВходВКомнату":
                if loginRoom(msg, id):
                    USER_Date = set_status_userData(USER_Date, "ВКомнате")
                else:
                    USER_Date = set_status_userData(USER_Date, "СтартовоеМеню")

            if (msg == "вернуть" and status == "ВКомнатеХост") or (msg == "вернуть" and status == "ВКомнате"):
                if status == "ВКомнатеХост":
                    kb = get_keyboard("создать комнату")
                if status == "ВКомнате":
                    kb = get_keyboard("войти в комнату")
                sender(id, "...", kb)


            if msg == "создать комнату" and status == "СтартовоеМеню":
                sender(id, "Комната создана\nКод подключения: " + str(createRoom(id)), get_keyboard("создать комнату"))
                USER_Date = set_status_userData(USER_Date, "ВКомнатеХост")

            if msg == "войти в комнату" and status == "СтартовоеМеню":
                sender(id, "Введите код")
                USER_Date = set_status_userData(USER_Date, "ВходВКомнату")

            if msg == "создать карты" and status == "СтартовоеМеню":

                tUser_data = []
                for i in USER_Date:
                    if i["ID"] == id:
                        tUser_data.append({"ID": i["ID"], "Status": "СоздаетКарты", "Room_id": i["Room_id"]})
                    else:
                        tUser_data.append(i)

                USER_Date = tUser_data.copy()
                pickle.dump(USER_Date, open('USER_Date.pickle', 'wb'))

                sender(id, "Введите количество", get_keyboard())

